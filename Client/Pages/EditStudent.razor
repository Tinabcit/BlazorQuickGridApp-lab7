@page "/editstudent/{id:int}"
@using BlazorQuickGridApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Edit Student</h3>

@if (student == null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="student" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Name">Name</label>
            <InputText id="Name" class="form-control" @bind-Value="student.Name" />
        </div>

        <div class="form-group">
            <label for="Age">Age</label>
            <InputNumber id="Age" class="form-control" @bind-Value="student.Age" />
        </div>

        <div class="form-group">
            <label for="Grade">Grade</label>
            <InputText id="Grade" class="form-control" @bind-Value="student.Grade" />
        </div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>
}

@if (isSuccess)
{
    <p class="alert alert-success mt-3">Student updated successfully!</p>
}

@if (errorMessage != null)
{
    <p class="alert alert-danger mt-3">Error: @errorMessage</p>
}

@code {
    [Parameter] public int id { get; set; }
    private StudentViewModel student;
    private bool isSuccess = false;
    private string errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<StudentViewModel>($"http://localhost:5123/api/student/{id}");
            if (response != null)
            {
                student = response;
            }
            else
            {
                errorMessage = "Student not found";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading student data: " + ex.Message;
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"http://localhost:5123/api/student/{id}", student);
            if (response.IsSuccessStatusCode)
            {
                isSuccess = true;
                errorMessage = null;
                Navigation.NavigateTo("/students"); // Redirect after successful update
            }
            else
            {
                isSuccess = false;
                errorMessage = "Failed to update student.";
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            errorMessage = "Error updating student: " + ex.Message;
        }
    }
}
